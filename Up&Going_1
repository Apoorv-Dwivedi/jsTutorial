It’s typically asserted that JavaScript is interpreted, because your Java‐Script source code is processed each time it’s run. But that’s notentirely accurate. The JavaScript engine actually compiles the pro‐gram on the fly and then
immediately runs the compiled code.


Using Number(..) (a built-in function) as shown is an explicit coer‐cion from any other type to the number type
Static Typing :- Where we pre define the data type of variable.
Dynamic Typing :- Where datatype is not defined, it changes based upon variable value. Js is dynamically typed language.

amount.toFixed(2)
lets us specify how many decimal places we’d like the number rounded to, and it produces the string as necessary.

in code we often need to group a series of statements together, which we often call a block. In JavaScript, a block is defined by wrapping one or more statements inside a curly-brace pair
{ .. }



Default Function declaration in JS.

function printAmount(amt) {
 console.log( amt.toFixed( 2 ) );
}
function formatAmount() {
 return "$" + amount.toFixed( 2 );
}
var amount = 99.99;
printAmount( amount * 2 ); // "199.98"
amount = formatAmount();
console.log( amount );


The following built-in types are available:
• string
• number
• boolean
• null and undefined
• object
• symbol (new to ES6)


The object type refers to a compound value where you can set properties (named locations) that each hold their own values of any type. This is perhaps one of the most useful value types in all of Java‐
Script:

var obj = {
 a: "hello world",
 b: 42,
 c: true
};


obj.a; // "hello world"
obj.b; // 42
obj.c;


Properties can either be accessed with dot notation (i.e., obj.a) or bracket notation (i.e., obj["a"]). Dot notation is shorter and gener‐ally easier to read, and is thus preferred when possible.
Bracket notation is useful if you have a property name that has spe‐cial characters in it, like obj["hello world!"]—such properties are often referred to as keys when accessed via bracket notation. The [ ]
notation requires either a variable (explained next) or a string lit‐eral (which needs to be wrapped in " .. " or ' .. ').

var obj = {
 a: "hello world",
 b: 42
};

var b = "a";
obj[b]; // "hello world"
obj["b"];


An array is an object that holds values (of any type) not particularly in named properties/keys, but rather in numerically indexed positions. For example:
var arr = [
 "hello world",
 42,
 true
];
arr[0]; // "hello world"
arr[1]; // 42
arr[2]; // true
arr.length; // 3
typeof arr; // "object"


Coercion comes in two forms in JavaScript: explicit and implicit. Explicit coercion is simply that you can see from the code that a conversion from one type to another will occur, whereas implicit
coercion is when the type conversion can happen as more of a nonobvious side effect of some other operation


The specific list of “falsy” values in JavaScript is as follows:
• "" (empty string)
• 0, -0, NaN (invalid number)
• null, undefined
• false
Any value that’s not on this “falsy” list is “truthy.”


The difference between == and === is usually characterized that == checks for value equality and === checks for both value and type equality. However, this is inaccurate. The proper way to characterize
them is that == checks for value equality with coercion allowed, and === checks for value equality without allowing coercion; === is often called “strict equality” for this reason.v
